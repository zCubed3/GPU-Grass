/*
 * MIT License
 * 
 * Copyright (c) 2023 zCubed3
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
*/

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "../ShaderInclude/GrassStruct.hlsl"
#include "../ShaderInclude/GrassSampling.hlsl"

#pragma multi_compile PLACER_ENCODED_COLOR PLACER_RANDOM_HSV
#pragma multi_compile _ UNITY_REVERSED_Z

// Cell info
float4 _GrassEncodeInfo;
float4 _GrassInstanceCullRef;
float4 _GrassPerfInfo;

// Our cell instances
RWStructuredBuffer<grass_instance_t> _GrassInstanceInfos;

// Our cell textures
Texture2D<float4> _EncodedGrassMap;
Texture2D<float4> _GrassBiomeMap;

SamplerState sampler_linear_clamp;

// Number of threads
#define THREADS_X 512

#ifndef PI
#define PI 3.141592654
#endif

#ifndef TAU
#define TAU (PI * 2.0)
#endif

#define MAT4_IDENTITY float4x4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)

// https://github.com/zCubed3/rgml/blob/main/src/matrix.rs#L347
float4x4 rotate_x(float rotation) {
    float4x4 m = MAT4_IDENTITY;

    m[1] = float4(0.0, cos(rotation), -sin(rotation), 0.0);
    m[2] = float4(0.0, sin(rotation), cos(rotation), 0.0);
    
    return m;
}

// https://github.com/zCubed3/rgml/blob/main/src/matrix.rs#L357
float4x4 rotate_y(float rotation) {
    float4x4 m = MAT4_IDENTITY;

    m[0] = float4(cos(rotation), 0.0, sin(rotation), 0.0);
    m[2] = float4(-sin(rotation), 0.0, cos(rotation), 0.0);

    return m;
}

// https://github.com/zCubed3/rgml/blob/main/src/matrix.rs#L367
float4x4 rotate_z(float rotation) {
    float4x4 m = MAT4_IDENTITY;

    m[0] = float4(cos(rotation), -sin(rotation), 0.0, 0.0);
    m[1] = float4(sin(rotation), cos(rotation), 0.0, 0.0);

    return m;
}

// https://github.com/zCubed3/rgml/blob/main/src/matrix.rs#L377
float4x4 rotation(float3 angles) {
    return mul(rotate_z(angles.z), mul(rotate_y(angles.y), rotate_x(angles.x)));
}

// https://github.com/zCubed3/rgml/blob/main/src/matrix.rs#L383
float4x4 look_at(float3 forward, float3 up) {
    float3 r_right = normalize(cross(forward, up));
    float3 r_up = normalize(cross(forward, r_right));

    float4x4 m = MAT4_IDENTITY;

    m[0] = float4(r_right[0], r_right[1], r_right[2], 0);
    m[1] = float4(r_up[0], r_up[1], r_up[2], 0);
    m[2] = float4(forward[0], forward[1], forward[2], 0);
    
    return m;
}


// https://gist.github.com/mattatz/86fff4b32d198d0928d0fa4ff32cf6fa
float4x4 inverse4x4(float4x4 m) {
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}

// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
float rand(float2 n)
{
    return frac(sin(dot(n, float2(12.9898, 4.1414))) * 43758.5453);
}

float noise(float2 p) {
	float2 ip = floor(p);
	float2 u = frac(p);
	u = u*u*(3.0-2.0*u);
	
	float res = lerp(
		lerp(rand(ip),rand(ip+float2(1.0,0.0)),u.x),
		lerp(rand(ip+float2(0.0,1.0)),rand(ip+float2(1.0,1.0)),u.x),u.y);
	return res*res;
}

// Generates a random point within a circle
float2 rand_circle(inout float2 seed, float rad_min = 0.0, float rad_max = 1.0) {
    float radius = rand(seed.xy);
    //seed += rand(seed);

    float theta = rand(seed.yx) * TAU;
    //seed += rand(seed);

    float2 edge = float2(sin(theta), cos(theta));

    return edge * clamp(radius, rad_min, rad_max);
}

//#define CONSTANT_RECYCLE

[numthreads(THREADS_X, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //uint count, stride;
    //_GrassInstanceInfos.GetDimensions(count, stride);
    uint count = (uint)_GrassState.w;

    uint per = THREADS_X;

    uint begin = per * id.x;
    uint end = begin + per;

    for (uint i = begin; i < end && i < count; i++)
    {
        grass_instance_t instance = _GrassInstanceInfos[i];

        // Does this need to be recycled?
        float3 position = mul(instance.model, float4(0, 0, 0, 1)).xyz;
        float dist = distance(position.xz, _GrassInstanceCullRef.xz);

#if !defined(CONSTANT_RECYCLE)
        if (dist < _GrassInstanceCullRef.w && !_GrassState.x) {
            continue;
        }
#endif
        
        float shift = (float)i.x / (float)count;
        float2 seed = _GrassInstanceCullRef.xz + shift.xx;

        float ring_min = 0.9;
        float ring_max = 0.95;

        [branch]
        if (_GrassState.x)
            //ring = rand(_GrassInstanceCullRef.xz + shift.xx + _GrassEncodeInfo.w);
            ring_min = 0;
        else { 
            float loss = saturate(_GrassPerfInfo.x / _GrassPerfInfo.y);

            //ring_min = lerp(_GrassPerfInfo.w, _GrassPerfInfo.z, loss);
            ring_min = _GrassPerfInfo.z;
            ring_max = _GrassPerfInfo.w;
        }

        float2 circle = rand_circle(seed, ring_min, ring_max);
        float3 random = float3(circle.x, 0, circle.y);

        float3 new_position = (random * _GrassInstanceCullRef.w) + float3(_GrassInstanceCullRef.x, 0, _GrassInstanceCullRef.z);

        // The cell local location
        //float2 uv = ((_GrassCellAABB.xy - float2(random.xz)) / (_GrassCellAABB.zw - _GrassCellAABB.xy));
        float2 uv = saturate((float2(random.x, random.z) + 1) / 2.0);

        // The Y level of the placement
        float4 encoded = _EncodedGrassMap.SampleLevel(sampler_linear_clamp, uv, 0);
        
        float mat_index = floor(encoded.z);
        float mat_frac = frac(encoded.z);
        float depth = encoded.w;

        #ifdef UNITY_REVERSED_Z
        depth = 1.0 - depth;
        #endif

        float height = _GrassEncodeInfo.z - lerp(_GrassEncodeInfo.x, _GrassEncodeInfo.y, depth);
        new_position.y = height;

        float3 min_size = read_lut_blend_1d(mat_index, 0).rgb;
        float3 max_size = read_lut_blend_1d(mat_index, 1).rgb;

        // The color + density
#ifdef PLACER_ENCODED_COLOR
        //float4 color = read_lut_blend_2d(float2(mat_index, grad * (_GrassState.z + 1)));
        float4 color = _GrassBiomeMap.SampleLevel(sampler_linear_clamp, uv, 0);
#elif PLACER_RANDOM_HSV
        // https://gist.github.com/983/e170a24ae8eba2cd174f
        float4 c = float4(shift, 1, 1, 0);
        float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
        float4 color = float4(c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y), 1);
#else
        float4 color = 1;
#endif

        //color.xyz = grad;
        //color.xyz = encoded.xyz;
        //color.xyz = float3(uv.xy, 0);
        //color.xyz = saturate(_GrassPerfInfo.x / _GrassPerfInfo.y);

        float3 scale = lerp(min_size, max_size, rand(shift.xx + _GrassEncodeInfo.ww));

        // Density check
        //float dense = rand(_GrassInstanceCullRef.xz + i.xx * 2.0);
        float dense = shift;
        scale *= dense < color.a;
        scale *= depth >= 0;
        scale *= mat_index >= 0;

        instance.color = float4(color.rgb, 1);
        
        float4x4 translation_matrix = float4x4(
            1, 0, 0, new_position.x,
            0, 1, 0, new_position.y,
            0, 0, 1, new_position.z,
            0, 0, 0, 1
        );

        float4x4 scale_matrix = float4x4(
            scale.x, 0, 0, 0,
            0, scale.y, 0, 0,
            0, 0, scale.z, 0,
            0, 0, 0, 1
        );

        //float4x4 rotation_matrix = rotate_y();
        
        // We need to rotate the encoded values before using them
        float4x4 rotation_a = rotate_y(rand(_GrassEncodeInfo.w + shift.x) * PI * 2.0);

        float3 normal = float3(encoded.x, 0, encoded.y);
        
        float4x4 rotation_matrix = rotation(normal);
        //float4x4 rotation_matrix = MAT4_IDENTITY;

        rotation_matrix = mul(rotation_matrix, rotation_a);

        instance.model = mul(translation_matrix, mul(scale_matrix, rotation_matrix));

        instance.modelInverse = inverse4x4(instance.model);

        _GrassInstanceInfos[i] = instance;
    }
}
